<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0"
           xsi:schemaLocation="
  http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
  ">

    <!-- Obtain a reference to the StockMarket from the Service Registry (from impl) -->
    <reference id="market" interface="org.pentaho.karaf.examples.stock.IStockMarket" availability="optional"/>


    <!-- Property Placeholder form of configuration Management. This has the advantage of supplying defaults right
        within this file. Downside is that it's not possible to have properties re-injected. On config change the whole
        blueprint is reloaded . -->
    <cm:property-placeholder persistent-id="pentaho.examples.stock" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="title" value="Default Title"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <bean id="stockMarket" class="org.pentaho.karaf.examples.stock.client.SwingStockQuoteClient" scope="singleton" init-method="init">

        <!-- This version of Configuration injects properties into setters. More importantly as the CM values change the new
             values are re-injected into the existing beans -->
        <cm:managed-properties persistent-id="pentaho.examples.stock" update-strategy="container-managed" />
        <argument ref="market" />

        <!-- Property placeholder form of configuration injection. Comment out the above <cm:managed-properties if using this option -->
        <!--<property name="title" value="${title}"/>-->
    </bean>

</blueprint>