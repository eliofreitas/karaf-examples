<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xsi:schemaLocation="
  http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
  ">

  <!-- Obtain reference to all IStockMarket implementations in the Service Registry. This list will shrink and grow
      as implementations come and go -->
  <reference-list id="markets" interface="org.pentaho.karaf.examples.stock.IStockMarket" availability="optional">

    <!-- Reference Listener will be notified as the collection is modified. -->
    <reference-listener ref="stockMarket" bind-method="marketAdded" unbind-method="marketRemoved"/>
  </reference-list>


  <!-- Property Placeholder form of configuration Management. This has the advantage of supplying defaults right
      within this file. Downside is that it's not possible to have properties re-injected. On config change the whole
      blueprint is reloaded .

      You can override the defaults by creating a pentaho.examples.stock.cfg file within $KARAF_HOME/etc.
      -->
  <cm:property-placeholder persistent-id="pentaho.examples.stock" update-strategy="reload">
    <cm:default-properties>
      <cm:property name="title" value="Default Title"/>
      <cm:property name="defaultMarket" value="Yahoo!"/>
    </cm:default-properties>
  </cm:property-placeholder>



  <!-- Here we construct the main class of this bundle, which shows the Swing UI -->
  <bean id="stockMarket" class="org.pentaho.karaf.examples.stock.client.SwingStockQuoteClient" scope="singleton"
        init-method="init" destroy-method="destroy">

    <!--
         Here is the second way we can handle Configuration injection in Blueprint.

         This managed-properties configuration injects properties into setters matching property values.
         In our example here 'title' will be injected into the setTitle() method of our bean.

         The unique advantage to using this method is that as configuration values change they'll be re-injected
         into the bean instances dynamically.

         update-strategy can be switched to 'bean-managed' and an update-method="" supplied. Using this option will
         cause the update-method to be called whenever the congfiguration changes.
    -->
    <cm:managed-properties persistent-id="pentaho.examples.stock" update-strategy="container-managed"/>

    <argument ref="markets"/>                <!-- Our Impls List -->
    <argument value="${defaultMarket}"/>     <!-- Value injected by cm:property-placeholder instance above -->

  </bean>

</blueprint>